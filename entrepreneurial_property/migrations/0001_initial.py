# Generated by Django 2.0.5 on 2018-08-23 12:25

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cigeo', '0003_airport_publictransportstop_railwaystation'),
        ('addresses', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brownfield',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name', max_length=32)),
                ('category', models.CharField(choices=[('a', 'A'), ('b', 'B'), ('c', 'C')], help_text='Category', max_length=1)),
                ('spatial_plan', models.CharField(help_text='Spatial plan', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description')),
                ('parcel_numbers', models.CharField(blank=True, help_text='Parcel numbers', max_length=255)),
                ('total_area', models.IntegerField(help_text='Total area <code>[m<sup>2</sup>]</code>')),
                ('free_area', models.IntegerField(help_text='Free area <code>m<sup>2</sup></code>')),
                ('can_divide', models.NullBooleanField(default=True)),
                ('smallest_divide_size', models.IntegerField(blank=True, help_text='Smallest size of divided unit <code>m<sup>2</sup>]</code>')),
                ('available_since', models.DateField(blank=True, help_text='Available since')),
                ('currency', models.CharField(choices=[('czk', 'CZK'), ('eur', 'EUR')], default='czk', help_text='Currency', max_length=3)),
                ('selling_price_maximal', models.IntegerField(help_text='Maximal selling price <code>[CZK/m<sup>2</sup>]</code>')),
                ('selling_price_minimal', models.IntegerField(help_text='Minimal price <code>[CZK/m<sup>2</sup>]</code>')),
                ('rental_price_minimal', models.IntegerField(help_text='Minimal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('rental_price_maximal', models.IntegerField(help_text='Maximal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('service_price', models.IntegerField(help_text='Service price <code>[CZK/month]</code>. Security, reception desk, ...')),
                ('price_note', models.TextField(blank=True, help_text='Price note')),
                ('agricultural_fund', models.NullBooleanField(help_text='Taken out of Agriculture fund')),
                ('af_removal_price', models.IntegerField(blank=True)),
                ('previous_usage', models.CharField(blank=True, choices=[('service', 'Public services'), ('military', 'Military'), ('agro', 'Agrucultural'), ('industry', 'Industry'), ('mining', 'Mining'), ('living', 'Living'), ('transport', 'Transporatation and logistics'), ('traveling', 'Traveling')], max_length=16)),
                ('hydrogeological_survey', models.NullBooleanField()),
                ('water_level', models.IntegerField(blank=True, null=True)),
                ('note', models.TextField(blank=True)),
                ('ecological_stress', models.IntegerField(blank=True, choices=[(0, 'yes'), (1, 'no'), (2, 'presumed')], null=True)),
                ('levels', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('security', models.NullBooleanField()),
                ('fire_protection', models.NullBooleanField()),
                ('heating', models.NullBooleanField()),
                ('air_condition', models.NullBooleanField()),
                ('crane', models.NullBooleanField()),
                ('reception_desk', models.NullBooleanField()),
                ('parking_place', models.IntegerField(blank=True, null=True)),
                ('load_lift', models.NullBooleanField()),
                ('personal_lift', models.NullBooleanField()),
                ('canteen', models.NullBooleanField()),
                ('railway_siding', models.NullBooleanField()),
                ('other_equipment', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContactPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='First name', max_length=20)),
                ('last_name', models.CharField(help_text='Last name', max_length=20)),
                ('role', models.CharField(help_text='Director, HR Manager, ...', max_length=20)),
                ('crm', models.URLField(blank=True, help_text='CRM link')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DevelopmentPark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name', max_length=32)),
                ('category', models.CharField(choices=[('a', 'A'), ('b', 'B'), ('c', 'C')], help_text='Category', max_length=1)),
                ('spatial_plan', models.CharField(help_text='Spatial plan', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description')),
                ('parcel_numbers', models.CharField(blank=True, help_text='Parcel numbers', max_length=255)),
                ('total_area', models.IntegerField(help_text='Total area <code>[m<sup>2</sup>]</code>')),
                ('free_area', models.IntegerField(help_text='Free area <code>m<sup>2</sup></code>')),
                ('can_divide', models.NullBooleanField(default=True)),
                ('smallest_divide_size', models.IntegerField(blank=True, help_text='Smallest size of divided unit <code>m<sup>2</sup>]</code>')),
                ('available_since', models.DateField(blank=True, help_text='Available since')),
                ('currency', models.CharField(choices=[('czk', 'CZK'), ('eur', 'EUR')], default='czk', help_text='Currency', max_length=3)),
                ('selling_price_maximal', models.IntegerField(help_text='Maximal selling price <code>[CZK/m<sup>2</sup>]</code>')),
                ('selling_price_minimal', models.IntegerField(help_text='Minimal price <code>[CZK/m<sup>2</sup>]</code>')),
                ('rental_price_minimal', models.IntegerField(help_text='Minimal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('rental_price_maximal', models.IntegerField(help_text='Maximal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('service_price', models.IntegerField(help_text='Service price <code>[CZK/month]</code>. Security, reception desk, ...')),
                ('price_note', models.TextField(blank=True, help_text='Price note')),
                ('agricultural_fund', models.NullBooleanField(help_text='Taken out of Agriculture fund')),
                ('af_removal_price', models.IntegerField(blank=True)),
                ('previous_usage', models.CharField(blank=True, choices=[('service', 'Public services'), ('military', 'Military'), ('agro', 'Agrucultural'), ('industry', 'Industry'), ('mining', 'Mining'), ('living', 'Living'), ('transport', 'Transporatation and logistics'), ('traveling', 'Traveling')], max_length=16)),
                ('hydrogeological_survey', models.NullBooleanField()),
                ('water_level', models.IntegerField(blank=True, null=True)),
                ('note', models.TextField(blank=True)),
                ('ecological_stress', models.IntegerField(blank=True, choices=[(0, 'yes'), (1, 'no'), (2, 'presumed')], null=True)),
                ('levels', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('security', models.NullBooleanField()),
                ('fire_protection', models.NullBooleanField()),
                ('heating', models.NullBooleanField()),
                ('air_condition', models.NullBooleanField()),
                ('crane', models.NullBooleanField()),
                ('reception_desk', models.NullBooleanField()),
                ('parking_place', models.IntegerField(blank=True, null=True)),
                ('load_lift', models.NullBooleanField()),
                ('personal_lift', models.NullBooleanField()),
                ('canteen', models.NullBooleanField()),
                ('railway_siding', models.NullBooleanField()),
                ('other_equipment', models.TextField(blank=True)),
                ('contact_person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.ContactPerson')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name', max_length=32)),
                ('category', models.CharField(choices=[('a', 'A'), ('b', 'B'), ('c', 'C')], help_text='Category', max_length=1)),
                ('spatial_plan', models.CharField(help_text='Spatial plan', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description')),
                ('parcel_numbers', models.CharField(blank=True, help_text='Parcel numbers', max_length=255)),
                ('total_area', models.IntegerField(help_text='Total area <code>[m<sup>2</sup>]</code>')),
                ('free_area', models.IntegerField(help_text='Free area <code>m<sup>2</sup></code>')),
                ('can_divide', models.NullBooleanField(default=True)),
                ('smallest_divide_size', models.IntegerField(blank=True, help_text='Smallest size of divided unit <code>m<sup>2</sup>]</code>')),
                ('available_since', models.DateField(blank=True, help_text='Available since')),
                ('currency', models.CharField(choices=[('czk', 'CZK'), ('eur', 'EUR')], default='czk', help_text='Currency', max_length=3)),
                ('selling_price_maximal', models.IntegerField(help_text='Maximal selling price <code>[CZK/m<sup>2</sup>]</code>')),
                ('selling_price_minimal', models.IntegerField(help_text='Minimal price <code>[CZK/m<sup>2</sup>]</code>')),
                ('rental_price_minimal', models.IntegerField(help_text='Minimal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('rental_price_maximal', models.IntegerField(help_text='Maximal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('service_price', models.IntegerField(help_text='Service price <code>[CZK/month]</code>. Security, reception desk, ...')),
                ('price_note', models.TextField(blank=True, help_text='Price note')),
                ('agricultural_fund', models.NullBooleanField(help_text='Taken out of Agriculture fund')),
                ('af_removal_price', models.IntegerField(blank=True)),
                ('previous_usage', models.CharField(blank=True, choices=[('service', 'Public services'), ('military', 'Military'), ('agro', 'Agrucultural'), ('industry', 'Industry'), ('mining', 'Mining'), ('living', 'Living'), ('transport', 'Transporatation and logistics'), ('traveling', 'Traveling')], max_length=16)),
                ('hydrogeological_survey', models.NullBooleanField()),
                ('water_level', models.IntegerField(blank=True, null=True)),
                ('note', models.TextField(blank=True)),
                ('ecological_stress', models.IntegerField(blank=True, choices=[(0, 'yes'), (1, 'no'), (2, 'presumed')], null=True)),
                ('levels', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('security', models.NullBooleanField()),
                ('fire_protection', models.NullBooleanField()),
                ('heating', models.NullBooleanField()),
                ('air_condition', models.NullBooleanField()),
                ('crane', models.NullBooleanField()),
                ('reception_desk', models.NullBooleanField()),
                ('parking_place', models.IntegerField(blank=True, null=True)),
                ('load_lift', models.NullBooleanField()),
                ('personal_lift', models.NullBooleanField()),
                ('canteen', models.NullBooleanField()),
                ('railway_siding', models.NullBooleanField()),
                ('other_equipment', models.TextField(blank=True)),
                ('contact_person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.ContactPerson')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenFieldAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description', null=True)),
                ('attachment', models.FileField(help_text='Attachment file', upload_to='')),
                ('green_field', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenFieldDrinkWater',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(blank=True, help_text='Dinstance to object <code>[m]</code>', null=True, verbose_name='Distnace')),
                ('note', models.TextField(blank=True, help_text='Note', verbose_name='Note')),
                ('diameter', models.IntegerField(blank=True, help_text='<code>[mm]</code>', null=True, verbose_name='Diameter')),
                ('capacity', models.IntegerField(help_text='Capacity <code>[m<sup>3</sup>/d]</code>', verbose_name='Capacity')),
                ('well', models.BooleanField(verbose_name='Well')),
                ('well_capacity', models.IntegerField(blank=True, help_text='Well capacity <code>[m<sup>3</sup>/d]</code>', null=True)),
                ('green_field', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenFieldElectricity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(blank=True, help_text='Dinstance to object <code>[m]</code>', null=True, verbose_name='Distnace')),
                ('note', models.TextField(blank=True, help_text='Note', verbose_name='Note')),
                ('current', models.IntegerField(help_text='Napětí <code>[kV]</code>', verbose_name='Napětí')),
                ('capacity', models.IntegerField(help_text='Kapacita <code>[MW]</code>', verbose_name='Kapacita')),
                ('green_field', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenFieldGas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(blank=True, help_text='Dinstance to object <code>[m]</code>', null=True, verbose_name='Distnace')),
                ('note', models.TextField(blank=True, help_text='Note', verbose_name='Note')),
                ('diameter', models.IntegerField(blank=True, help_text='<code>[mm]</code>', null=True, verbose_name='Diameter')),
                ('pressure', models.IntegerField(help_text='Pressure <code>[kPa]</code>', verbose_name='Pressure')),
                ('capacity', models.IntegerField(help_text='Capacity <code>[m<sup>3</sup>/d]</code>', verbose_name='Capacity')),
                ('green_field', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenFieldGenericNote',
            fields=[
                ('genericnote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cigeo.GenericNote')),
                ('green_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            bases=('cigeo.genericnote',),
        ),
        migrations.CreateModel(
            name='GreenFieldLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, help_text='Body, linie, polygony', null=True, srid=4326, verbose_name='Geometrie')),
                ('highway_distance', models.FloatField(default=-1)),
                ('airport_distance', models.FloatField(default=-1)),
                ('public_transport_distance', models.FloatField(default=-1)),
                ('railway_distance', models.FloatField(default=-1)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='addresses.Address', verbose_name='Adresa')),
                ('green_field', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenFieldPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Photo title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description', null=True)),
                ('image', models.ImageField(help_text='Image file', upload_to='')),
                ('green_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenFieldTechnologicalWater',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(blank=True, help_text='Dinstance to object <code>[m]</code>', null=True, verbose_name='Distnace')),
                ('note', models.TextField(blank=True, help_text='Note', verbose_name='Note')),
                ('diameter', models.IntegerField(blank=True, help_text='<code>[mm]</code>', null=True, verbose_name='Diameter')),
                ('capacity', models.IntegerField(help_text='Capacity <code>[m<sup>3</sup>/d]</code>', verbose_name='Capacity')),
                ('well', models.BooleanField(verbose_name='Well')),
                ('well_capacity', models.IntegerField(blank=True, help_text='Well capacity <code>[m<sup>3</sup>/d]</code>', null=True)),
                ('green_field', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenFieldTelecommunication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(blank=True, help_text='Dinstance to object <code>[m]</code>', null=True, verbose_name='Distnace')),
                ('note', models.TextField(blank=True, help_text='Note', verbose_name='Note')),
                ('technology', models.CharField(blank=True, choices=[('optic', 'Optic'), ('metalic', 'Metalic'), ('wifi', 'WIFI'), ('cell', 'Cellular')], max_length=10)),
                ('green_field', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenFieldWasteWaterIndustrial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(blank=True, help_text='Dinstance to object <code>[m]</code>', null=True, verbose_name='Distnace')),
                ('note', models.TextField(blank=True, help_text='Note', verbose_name='Note')),
                ('diameter', models.IntegerField(help_text='Velikost přípojky <code>[mm]</code>', verbose_name='Průměr')),
                ('capacity', models.IntegerField(help_text='Kapacita přípojky <code>[m<sup>3</sup>/d]</code>', verbose_name='Kapacita přípojky')),
                ('sewage_plant_name', models.TextField(blank=True, help_text='Name and address')),
                ('sewage_plant_technology', models.CharField(blank=True, max_length=10)),
                ('green_field', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenFieldWasteWaterRain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(blank=True, help_text='Dinstance to object <code>[m]</code>', null=True, verbose_name='Distnace')),
                ('note', models.TextField(blank=True, help_text='Note', verbose_name='Note')),
                ('diameter', models.IntegerField(help_text='Velikost přípojky <code>[mm]</code>', verbose_name='Průměr')),
                ('capacity', models.IntegerField(help_text='Kapacita přípojky <code>[m<sup>3</sup>/d]</code>', verbose_name='Kapacita přípojky')),
                ('absorbtion', models.CharField(blank=True, help_text='River name, where the water will be absorbed', max_length=64)),
                ('green_field', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GreenFieldWasteWaterSevage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(blank=True, help_text='Dinstance to object <code>[m]</code>', null=True, verbose_name='Distnace')),
                ('note', models.TextField(blank=True, help_text='Note', verbose_name='Note')),
                ('diameter', models.IntegerField(help_text='Velikost přípojky <code>[mm]</code>', verbose_name='Průměr')),
                ('capacity', models.IntegerField(help_text='Kapacita přípojky <code>[m<sup>3</sup>/d]</code>', verbose_name='Kapacita přípojky')),
                ('sewage_plant_name', models.TextField(blank=True, help_text='Name and address')),
                ('sewage_plant_technology', models.CharField(blank=True, max_length=10)),
                ('green_field', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entrepreneurial_property.GreenField')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndustrialAreal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name', max_length=32)),
                ('category', models.CharField(choices=[('a', 'A'), ('b', 'B'), ('c', 'C')], help_text='Category', max_length=1)),
                ('spatial_plan', models.CharField(help_text='Spatial plan', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description')),
                ('parcel_numbers', models.CharField(blank=True, help_text='Parcel numbers', max_length=255)),
                ('total_area', models.IntegerField(help_text='Total area <code>[m<sup>2</sup>]</code>')),
                ('free_area', models.IntegerField(help_text='Free area <code>m<sup>2</sup></code>')),
                ('can_divide', models.NullBooleanField(default=True)),
                ('smallest_divide_size', models.IntegerField(blank=True, help_text='Smallest size of divided unit <code>m<sup>2</sup>]</code>')),
                ('available_since', models.DateField(blank=True, help_text='Available since')),
                ('currency', models.CharField(choices=[('czk', 'CZK'), ('eur', 'EUR')], default='czk', help_text='Currency', max_length=3)),
                ('selling_price_maximal', models.IntegerField(help_text='Maximal selling price <code>[CZK/m<sup>2</sup>]</code>')),
                ('selling_price_minimal', models.IntegerField(help_text='Minimal price <code>[CZK/m<sup>2</sup>]</code>')),
                ('rental_price_minimal', models.IntegerField(help_text='Minimal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('rental_price_maximal', models.IntegerField(help_text='Maximal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('service_price', models.IntegerField(help_text='Service price <code>[CZK/month]</code>. Security, reception desk, ...')),
                ('price_note', models.TextField(blank=True, help_text='Price note')),
                ('agricultural_fund', models.NullBooleanField(help_text='Taken out of Agriculture fund')),
                ('af_removal_price', models.IntegerField(blank=True)),
                ('previous_usage', models.CharField(blank=True, choices=[('service', 'Public services'), ('military', 'Military'), ('agro', 'Agrucultural'), ('industry', 'Industry'), ('mining', 'Mining'), ('living', 'Living'), ('transport', 'Transporatation and logistics'), ('traveling', 'Traveling')], max_length=16)),
                ('hydrogeological_survey', models.NullBooleanField()),
                ('water_level', models.IntegerField(blank=True, null=True)),
                ('note', models.TextField(blank=True)),
                ('ecological_stress', models.IntegerField(blank=True, choices=[(0, 'yes'), (1, 'no'), (2, 'presumed')], null=True)),
                ('levels', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('security', models.NullBooleanField()),
                ('fire_protection', models.NullBooleanField()),
                ('heating', models.NullBooleanField()),
                ('air_condition', models.NullBooleanField()),
                ('crane', models.NullBooleanField()),
                ('reception_desk', models.NullBooleanField()),
                ('parking_place', models.IntegerField(blank=True, null=True)),
                ('load_lift', models.NullBooleanField()),
                ('personal_lift', models.NullBooleanField()),
                ('canteen', models.NullBooleanField()),
                ('railway_siding', models.NullBooleanField()),
                ('other_equipment', models.TextField(blank=True)),
                ('contact_person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.ContactPerson')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Office',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name', max_length=32)),
                ('category', models.CharField(choices=[('a', 'A'), ('b', 'B'), ('c', 'C')], help_text='Category', max_length=1)),
                ('spatial_plan', models.CharField(help_text='Spatial plan', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description')),
                ('parcel_numbers', models.CharField(blank=True, help_text='Parcel numbers', max_length=255)),
                ('total_area', models.IntegerField(help_text='Total area <code>[m<sup>2</sup>]</code>')),
                ('free_area', models.IntegerField(help_text='Free area <code>m<sup>2</sup></code>')),
                ('can_divide', models.NullBooleanField(default=True)),
                ('smallest_divide_size', models.IntegerField(blank=True, help_text='Smallest size of divided unit <code>m<sup>2</sup>]</code>')),
                ('available_since', models.DateField(blank=True, help_text='Available since')),
                ('currency', models.CharField(choices=[('czk', 'CZK'), ('eur', 'EUR')], default='czk', help_text='Currency', max_length=3)),
                ('selling_price_maximal', models.IntegerField(help_text='Maximal selling price <code>[CZK/m<sup>2</sup>]</code>')),
                ('selling_price_minimal', models.IntegerField(help_text='Minimal price <code>[CZK/m<sup>2</sup>]</code>')),
                ('rental_price_minimal', models.IntegerField(help_text='Minimal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('rental_price_maximal', models.IntegerField(help_text='Maximal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('service_price', models.IntegerField(help_text='Service price <code>[CZK/month]</code>. Security, reception desk, ...')),
                ('price_note', models.TextField(blank=True, help_text='Price note')),
                ('agricultural_fund', models.NullBooleanField(help_text='Taken out of Agriculture fund')),
                ('af_removal_price', models.IntegerField(blank=True)),
                ('previous_usage', models.CharField(blank=True, choices=[('service', 'Public services'), ('military', 'Military'), ('agro', 'Agrucultural'), ('industry', 'Industry'), ('mining', 'Mining'), ('living', 'Living'), ('transport', 'Transporatation and logistics'), ('traveling', 'Traveling')], max_length=16)),
                ('hydrogeological_survey', models.NullBooleanField()),
                ('water_level', models.IntegerField(blank=True, null=True)),
                ('note', models.TextField(blank=True)),
                ('ecological_stress', models.IntegerField(blank=True, choices=[(0, 'yes'), (1, 'no'), (2, 'presumed')], null=True)),
                ('levels', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('security', models.NullBooleanField()),
                ('fire_protection', models.NullBooleanField()),
                ('heating', models.NullBooleanField()),
                ('air_condition', models.NullBooleanField()),
                ('crane', models.NullBooleanField()),
                ('reception_desk', models.NullBooleanField()),
                ('parking_place', models.IntegerField(blank=True, null=True)),
                ('load_lift', models.NullBooleanField()),
                ('personal_lift', models.NullBooleanField()),
                ('canteen', models.NullBooleanField()),
                ('railway_siding', models.NullBooleanField()),
                ('other_equipment', models.TextField(blank=True)),
                ('contact_person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.ContactPerson')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'Private'), (1, 'Public'), (2, 'Combined')], help_text='Ownership type')),
                ('name', models.CharField(help_text='Name', max_length=32)),
                ('number_of_owners', models.IntegerField(choices=[(1, 'One'), (2, 'Two'), (100, 'More')], default=1, help_text='Name')),
                ('crm', models.URLField(help_text='CRM link')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScientificPark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name', max_length=32)),
                ('category', models.CharField(choices=[('a', 'A'), ('b', 'B'), ('c', 'C')], help_text='Category', max_length=1)),
                ('spatial_plan', models.CharField(help_text='Spatial plan', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description')),
                ('parcel_numbers', models.CharField(blank=True, help_text='Parcel numbers', max_length=255)),
                ('total_area', models.IntegerField(help_text='Total area <code>[m<sup>2</sup>]</code>')),
                ('free_area', models.IntegerField(help_text='Free area <code>m<sup>2</sup></code>')),
                ('can_divide', models.NullBooleanField(default=True)),
                ('smallest_divide_size', models.IntegerField(blank=True, help_text='Smallest size of divided unit <code>m<sup>2</sup>]</code>')),
                ('available_since', models.DateField(blank=True, help_text='Available since')),
                ('currency', models.CharField(choices=[('czk', 'CZK'), ('eur', 'EUR')], default='czk', help_text='Currency', max_length=3)),
                ('selling_price_maximal', models.IntegerField(help_text='Maximal selling price <code>[CZK/m<sup>2</sup>]</code>')),
                ('selling_price_minimal', models.IntegerField(help_text='Minimal price <code>[CZK/m<sup>2</sup>]</code>')),
                ('rental_price_minimal', models.IntegerField(help_text='Minimal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('rental_price_maximal', models.IntegerField(help_text='Maximal rental price <code>[CZK/m<sup>2</sup>/month]</code>')),
                ('service_price', models.IntegerField(help_text='Service price <code>[CZK/month]</code>. Security, reception desk, ...')),
                ('price_note', models.TextField(blank=True, help_text='Price note')),
                ('agricultural_fund', models.NullBooleanField(help_text='Taken out of Agriculture fund')),
                ('af_removal_price', models.IntegerField(blank=True)),
                ('previous_usage', models.CharField(blank=True, choices=[('service', 'Public services'), ('military', 'Military'), ('agro', 'Agrucultural'), ('industry', 'Industry'), ('mining', 'Mining'), ('living', 'Living'), ('transport', 'Transporatation and logistics'), ('traveling', 'Traveling')], max_length=16)),
                ('hydrogeological_survey', models.NullBooleanField()),
                ('water_level', models.IntegerField(blank=True, null=True)),
                ('note', models.TextField(blank=True)),
                ('ecological_stress', models.IntegerField(blank=True, choices=[(0, 'yes'), (1, 'no'), (2, 'presumed')], null=True)),
                ('levels', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('security', models.NullBooleanField()),
                ('fire_protection', models.NullBooleanField()),
                ('heating', models.NullBooleanField()),
                ('air_condition', models.NullBooleanField()),
                ('crane', models.NullBooleanField()),
                ('reception_desk', models.NullBooleanField()),
                ('parking_place', models.IntegerField(blank=True, null=True)),
                ('load_lift', models.NullBooleanField()),
                ('personal_lift', models.NullBooleanField()),
                ('canteen', models.NullBooleanField()),
                ('railway_siding', models.NullBooleanField()),
                ('other_equipment', models.TextField(blank=True)),
                ('contact_person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.ContactPerson')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.Owner')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='office',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.Owner'),
        ),
        migrations.AddField(
            model_name='industrialareal',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.Owner'),
        ),
        migrations.AddField(
            model_name='greenfield',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.Owner'),
        ),
        migrations.AddField(
            model_name='developmentpark',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.Owner'),
        ),
        migrations.AddField(
            model_name='brownfield',
            name='contact_person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.ContactPerson'),
        ),
        migrations.AddField(
            model_name='brownfield',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='entrepreneurial_property.Owner'),
        ),
    ]
